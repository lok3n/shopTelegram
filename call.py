import os
from typing import Dict

from fastapi import FastAPI, Request, status
from main import bot
from utils.models import Users, Payments, Product
import logging

app = FastAPI()


def serialization(data_str: str) -> Dict:
    data = {}
    for i in data_str.split("&"):
        key, value = i.split("=")
        data[key] = value
    return data


@app.post("/payment")
async def root(request: Request):
    body = await request.body()
    data = serialization(body.decode("utf-8"))
    print(body.decode("utf-8"))
    logging.info(f'NEW PAYMENT - {body.decode("utf-8")}')
    admins = os.getenv('ADMINS').split(',')
    try:
        payment = Payments.get_by_id(int(data.get("label")))
    except Exception as e:
        for admin in admins:
            await bot.send_message(int(admin),
                                   f'‚ùå –ü—Ä–∏—à–µ–ª –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º #{data.get("label")}\n'
                                   f'–°—É–º–º–∞: {data.get("amount")}‚ÇΩ\n'
                                   f'–°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è: {data.get("withdraw_amount")}‚ÇΩ\n'
                                   f'error: {e}')
        return status.HTTP_402_PAYMENT_REQUIRED
    if float(payment.amount) != float(data.get('withdraw_amount')):
        for admin in admins:
            await bot.send_message(int(admin),
                                   f'‚ùå –ü—Ä–∏—à–µ–ª –æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º #{data.get("label")} —Å –¥—Ä—É–≥–æ–π —Å—É–º–º–æ–π\n'
                                   f'–°—É–º–º–∞: {data.get("amount")}‚ÇΩ\n'
                                   f'–°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è: {data.get("withdraw_amount")}‚ÇΩ\n'
                                   f'–°—É–º–º–∞ –≤ –ø–ª–∞—Ç–µ–∂–µ: {payment.amount}‚ÇΩ')
        return status.HTTP_402_PAYMENT_REQUIRED
    if payment.finished == 0:
        payment.finished = 1
        payment.save()
        user = Users.get_or_none(Users.user_id == payment.user_id)
        await bot.edit_message_text(text='‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!',
                                    chat_id=payment.user_id,
                                    message_id=payment.message_id)
        for admin in admins:
            await bot.send_message(int(admin), f'''üÜï –ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ üÜï\n
üíº –ò–º—è –∫–æ—à–µ–ª—å–∫–∞, –∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–ª–∞—Ç—ë–∂: {payment.used_token.name}
üÜî –ù–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞: {payment.id}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name}
ü™™ –õ–æ–≥–∏–Ω: {user.username}
üí∞ –°—É–º–º–∞: {payment.amount}‚ÇΩ [{data.get("withdraw_amount")}‚ÇΩ]''')
        for product_id in payment.products.split(','):
            try:
                product = Product.get_by_id(int(product_id))
                await bot.send_photo(payment.user_id, product.photo_id, caption=f'{product.description}')
                product.delete_instance()
            except:
                for admin in admins:
                    await bot.send_message(int(admin),
                                           f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –ø–ª–∞—Ç–µ–∂—É {payment.id}\n'
                                           f'–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ç–æ–≤–∞—Ä –±—ã–ª –≤—ã–∫—É–ø–ª–µ–Ω –¥—Ä—É–≥–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º')
    else:
        for admin in admins:
            await bot.send_message(int(admin), f'‚ùå –ü–ª–∞—Ç—ë–∂ #{data.get("label")} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω')
    return status.HTTP_200_OK

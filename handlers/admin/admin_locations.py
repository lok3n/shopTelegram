from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from filters.admin import IsAdmin
from utils.keyboards import admin_locations_kb, back_btn, admin_show_loc_kb, cancel_btn, adm_submit_and_cancel
from utils.models import Locations, Product
from utils.states import Admin

admin_locations_router = Router()


@admin_locations_router.callback_query(IsAdmin(), F.data == 'admin_locations')
async def admin_locations_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text('üõ°Ô∏è –ù–∏–∂–µ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é –Ω–∞–∂–º–∏—Ç–µ '
                                     '¬´–î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é¬ª\n'
                                     '–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–∫—É—é-—Ç–æ –ª–æ–∫–∞—Ü–∏—é, –≤—ã–±–µ—Ä–∏—Ç–µ –µ—ë –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é¬ª'
                                     ', –ø—Ä–∏ —ç—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Ç–æ–∂–µ —É–¥–∞–ª—è—Ç—Å—è',
                                     reply_markup=admin_locations_kb(Locations.select()))


@admin_locations_router.callback_query(IsAdmin(), F.data == 'add_location')
async def add_location_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ª–æ–∫–∞—Ü–∏–π –Ω–∞–∂–º–∏—Ç–µ '
                                     '–Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª',
                                     reply_markup=back_btn('admin_locations'))
    await state.update_data(past_msg_id=callback.message.message_id)
    await state.set_state(Admin.add_location)


@admin_locations_router.message(IsAdmin(), Admin.add_location)
async def add_location_input_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.delete()
    location = Locations.get_or_none(Locations.name == message.text)
    if location:
        return await message.bot.edit_message_text(
            '‚ùå –¢–∞–∫–∞—è –ª–æ–∫–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ª–æ–∫–∞—Ü–∏–π '
            '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª', chat_id=message.from_user.id, message_id=int(data['past_msg_id']))
    await message.bot.edit_message_text('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ . . .', chat_id=message.from_user.id,
                                        message_id=int(data['past_msg_id']))
    location = Locations.create(name=message.text)
    await state.clear()
    await message.bot.edit_message_text(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º:\n\n{message.text}',
                                        chat_id=message.from_user.id,
                                        message_id=int(data['past_msg_id']),
                                        reply_markup=back_btn('admin_locations'))


@admin_locations_router.callback_query(IsAdmin(), F.data.startswith('adm_show_loc'))
async def adm_show_loc_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    products = Product.select().where(Product.location == int(callback.data.split()[1]))
    location = Locations.get_by_id(int(callback.data.split()[1]))
    await callback.message.edit_text(f'üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é {location.name}\n'
                                     f'üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏: {len(products)} —à—Ç',
                                     reply_markup=admin_show_loc_kb(location.id, products))


@admin_locations_router.callback_query(IsAdmin(), F.data.startswith('from_prod_adm_show_loc'))
async def adm_show_loc_handler(callback: CallbackQuery, state: FSMContext):
    '''function as upper, but this func for returning from adm_show_prod'''
    await state.clear()
    products = Product.select().where(Product.location == int(callback.data.split()[1]))
    location = Locations.get_by_id(int(callback.data.split()[1]))
    await callback.message.delete()
    await callback.message.answer(f'üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é {location.name}\n'
                                  f'üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏: {len(products)} —à—Ç',
                                  reply_markup=admin_show_loc_kb(location.id, products))


@admin_locations_router.callback_query(IsAdmin(), F.data.startswith('delete_location'))
async def delete_location_handler(callback: CallbackQuery):
    try:
        products = Product.select().where(Product.location == int(callback.data.split()[1]))
        for i in products:
            i.delete_instance()
        location = Locations.get_by_id(int(callback.data.split()[1]))
        location.delete_instance()
        await callback.message.edit_text(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –ª–æ–∫–∞—Ü–∏—é {location.name}\n'
                                         f'üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ —É–¥–∞–ª–µ–Ω–æ, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏: {len(products)} —à—Ç',
                                         reply_markup=back_btn('admin_locations'))
    except Exception as e:
        await callback.message.edit_text(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}\n'
                                         f'–°–≤—è–∂–∏—Ç–µ—Å—å —Å @whytek –¥–ª—è –ø–æ—á–∏–Ω–∫–∏ –±–æ—Ç–∞\n'
                                         f'{callback.data}')


@admin_locations_router.callback_query(IsAdmin(), F.data.startswith('add_product'))
async def add_product_handler(callback: CallbackQuery, state: FSMContext):
    location = Locations.get_by_id(int(callback.data.split()[1]))
    await callback.message.edit_text(f'üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é {location.name}\n'
                                     f'üñºÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞',
                                     reply_markup=cancel_btn(f'adm_show_loc {location.id}'))
    await state.update_data(past_msg_id=callback.message.message_id,
                            location=location.id)
    await state.set_state(Admin.input_product_photo)


@admin_locations_router.message(IsAdmin(), Admin.input_product_photo)
async def input_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.delete()
    if not message.photo:
        return await message.bot.edit_message_text('‚ùå –û—à–∏–±–∫–∞! –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞',
                                                   chat_id=message.from_user.id,
                                                   message_id=int(data['past_msg_id']),
                                                   reply_markup=cancel_btn(f'adm_show_loc {data['location']}'))
    await state.update_data(photo=message.photo[-1].file_id)
    await state.set_state(Admin.input_product_description)
    await message.bot.edit_message_text('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–æ—Ç–æ!\n\n'
                                        'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –º–µ—Å—Ç–∞ –≥–¥–µ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è',
                                        chat_id=message.from_user.id,
                                        message_id=int(data['past_msg_id']),
                                        reply_markup=cancel_btn(f'adm_show_loc {data['location']}'))


@admin_locations_router.message(IsAdmin(), Admin.input_product_description)
async def input_description(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.delete()
    await state.update_data(description=message.text)
    await state.set_state(Admin.input_product_price)
    await message.bot.edit_message_text(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ: {message.text}\n\n'
                                        'üíµ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
                                        chat_id=message.from_user.id,
                                        message_id=int(data['past_msg_id']),
                                        reply_markup=cancel_btn(f'adm_show_loc {data['location']}'))


@admin_locations_router.message(IsAdmin(), Admin.input_product_price)
async def input_price(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.delete()
    if not message.text.isdigit():
        return await message.bot.edit_message_text(f'‚ùå –û—à–∏–±–∫–∞! –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä',
                                                   chat_id=message.from_user.id,
                                                   message_id=int(data['past_msg_id']),
                                                   reply_markup=cancel_btn(f'adm_show_loc {data['location']}'))
    await state.set_state(Admin.submit)
    await message.bot.delete_message(chat_id=message.from_user.id, message_id=int(data['past_msg_id']))
    msg = await message.answer_photo(data['photo'], f'''üëâ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –í–∞–º–∏ –¥–∞–Ω–Ω—ã–µ

üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data["description"]}
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: {message.text} —Ä—É–±–ª–µ–π''', reply_markup=adm_submit_and_cancel())
    await state.update_data(price=message.text, past_msg_id=msg.message_id)


@admin_locations_router.callback_query(IsAdmin(), F.data.startswith('new_product'))
async def submit_new_product_handle(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    location = Locations.get_by_id(int(data['location']))
    await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=int(data['past_msg_id']))
    if callback.data.split()[1] == 'submit':
        Product.create(location=location.id, photo_id=data['photo'], description=data['description'],
                       price=int(data['price']))
        await state.clear()
        await callback.message.answer(f'‚úÖ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –ª–æ–∫–∞—Ü–∏—é {location.name}',
                                      reply_markup=back_btn(f'adm_show_loc {location.id}'))
    elif callback.data.split()[1] == 'cancel':
        await state.clear()
        await callback.message.answer(f'‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ª–æ–∫–∞—Ü–∏—é {location.name}',
                                      reply_markup=back_btn(f'adm_show_loc {location.id}'))
